{"version":3,"sources":["scripts/main.js"],"names":["body","document","querySelector","BASE_URL","phonesID","request","url","fetch","then","response","ok","json","Promise","reject","status","getPhonesID","getFirstReceivedDetails","arr","race","map","phone","element","createElement","setAttribute","innerText","name","appendChild","getThreeFastestDetails","clone","slice","list","createList","result","filter","x","id","newResult","header","phrase","h3","getAllSuccessfulDetails","forEach","ID","li","phones","push"],"mappings":";AACA,aAEA,IAAMA,EAAOC,SAASC,cAAc,QAC9BC,EAAW,6DAGXC,EAAW,GAEXC,EAAU,SAACC,GACRC,OAAAA,MAASJ,GAAAA,OAAAA,GAAWG,OAAAA,IACxBE,KAAK,SAAAC,GACA,OAACA,EAASC,GAMPD,EAASE,OALPC,QAAQC,OACVJ,GAAAA,OAAAA,EAASK,YAQhBC,EAAc,WAAMV,OAAAA,EAAQ,gBASlC,SAASW,EAAwBC,GAC/BL,QAAQM,KAAKD,EAAIE,IAAId,IAClBG,KAAK,SAAAY,GACEC,IAAAA,EAAUpB,SAASqB,cAAc,OAEvCD,EAAQE,aAAa,QAAS,kBAC9BF,EAAQG,UAAYJ,EAAMK,KAC1BzB,EAAK0B,YAAYL,KAIvB,SAASM,EAAuBV,GAC1BW,IAAAA,EAAQX,EAAIY,QACVC,EAAOC,EAAW,gBAAiB,IAEzCnB,QAAQM,KAAKU,EAAMT,IAAId,IACpBG,KAAK,SAAAY,GACEC,IAAAA,EAAUpB,SAASqB,cAAc,MAKhCF,OAHPC,EAAQG,UAAYJ,EAAMK,KAC1BK,EAAKJ,YAAYL,GAEVD,IAERZ,KAAK,SAACwB,GACLJ,EAAQA,EAAMK,OAAO,SAAAC,GAAKA,OAAAA,IAAgBF,UAAAA,OAAAA,EAAOG,GAA3B,WAEtBvB,QAAQM,KAAKU,EAAMT,IAAId,IACpBG,KAAK,SAAAY,GACEC,IAAAA,EAAUpB,SAASqB,cAAc,MAKhCF,OAHPC,EAAQG,UAAYJ,EAAMK,KAC1BK,EAAKJ,YAAYL,GAEVD,IAERZ,KAAK,SAAC4B,GACLR,EAAQA,EAAMK,OAAO,SAAAC,GAAKA,OAAAA,IAAgBE,UAAAA,OAAAA,EAAUD,GAA9B,WAEtBvB,QAAQM,KAAKU,EAAMT,IAAId,IACpBG,KAAK,SAAAY,GACEC,IAAAA,EAAUpB,SAASqB,cAAc,MAEvCD,EAAQG,UAAYJ,EAAMK,KAC1BK,EAAKJ,YAAYL,KAElBb,KAAK,WAAMR,OAAAA,EAAK0B,YAAYI,SAKzC,SAASC,EAAWM,EAAQC,GACpBR,IAAAA,EAAO7B,SAASqB,cAAc,MAC9BiB,EAAKtC,SAASqB,cAAc,MAM3BQ,OAJPS,EAAGf,UAAea,GAAAA,OAAAA,GAClBP,EAAKP,aAAa,QAAYe,GAAAA,OAAAA,IAC9BR,EAAKJ,YAAYa,GAEVT,EAGT,SAASU,EAAwBvB,GACzBa,IAAAA,EAAOC,EAAW,iBAAkB,kBAE1Cd,EAAIwB,QAAQ,SAAAC,GAAMrC,OAAAA,EAAQqC,GACvBlC,KAAK,SAAAY,GACEuB,IAAAA,EAAK1C,SAASqB,cAAc,MAElCqB,EAAGpB,aAAa,KAASH,GAAAA,OAAAA,EAAMe,KAC/BQ,EAAGnB,UAAYJ,EAAMK,KAErBK,EAAKJ,YAAYiB,OAGrB3C,EAAK0B,YAAYI,GAlFnBf,IACGP,KAAK,SAAAoC,GAAUA,OAAAA,EAAOH,QAAQ,SAAArB,GAC7BhB,OAAAA,EAASyC,KAAezB,UAAAA,OAAAA,EAAMe,GADI,cAEnC3B,KAAK,WAAMQ,OAAAA,EAAwBZ,KACnCI,KAAK,WAAMgC,OAAAA,EAAwBpC,KACnCI,KAAK,WAAMmB,OAAAA,EAAuBvB","file":"main.d5c55a49.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable prefer-promise-reject-errors */\n'use strict';\n\nconst body = document.querySelector('body');\nconst BASE_URL = `https://mate-academy.github.io/`\n  + `phone-catalogue-static/api/`;\n\nconst phonesID = [];\n\nconst request = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          `${response.status}`\n        );\n      }\n\n      return response.json();\n    });\n};\n\nconst getPhonesID = () => request('phones.json');\n\ngetPhonesID()\n  .then(phones => phones.forEach(phone =>\n    phonesID.push(`phones/${phone.id}.json`)))\n  .then(() => getFirstReceivedDetails(phonesID))\n  .then(() => getAllSuccessfulDetails(phonesID))\n  .then(() => getThreeFastestDetails(phonesID));\n\nfunction getFirstReceivedDetails(arr) {\n  Promise.race(arr.map(request))\n    .then(phone => {\n      const element = document.createElement('div');\n\n      element.setAttribute('class', 'first-received');\n      element.innerText = phone.name;\n      body.appendChild(element);\n    });\n}\n\nfunction getThreeFastestDetails(arr) {\n  let clone = arr.slice();\n  const list = createList('Three Fastest', '');\n\n  Promise.race(clone.map(request))\n    .then(phone => {\n      const element = document.createElement('li');\n\n      element.innerText = phone.name;\n      list.appendChild(element);\n\n      return phone;\n    })\n    .then((result) => {\n      clone = clone.filter(x => x !== `phones/${result.id}.json`);\n\n      Promise.race(clone.map(request))\n        .then(phone => {\n          const element = document.createElement('li');\n\n          element.innerText = phone.name;\n          list.appendChild(element);\n\n          return phone;\n        })\n        .then((newResult) => {\n          clone = clone.filter(x => x !== `phones/${newResult.id}.json`);\n\n          Promise.race(clone.map(request))\n            .then(phone => {\n              const element = document.createElement('li');\n\n              element.innerText = phone.name;\n              list.appendChild(element);\n            })\n            .then(() => body.appendChild(list));\n        });\n    });\n}\n\nfunction createList(header, phrase) {\n  const list = document.createElement('ul');\n  const h3 = document.createElement('h3');\n\n  h3.innerText = `${header}`;\n  list.setAttribute('class', `${phrase}`);\n  list.appendChild(h3);\n\n  return list;\n}\n\nfunction getAllSuccessfulDetails(arr) {\n  const list = createList('All Successful', 'all-successful');\n\n  arr.forEach(ID => request(ID)\n    .then(phone => {\n      const li = document.createElement('li');\n\n      li.setAttribute('id', `${phone.id}`);\n      li.innerText = phone.name;\n\n      list.appendChild(li);\n    }));\n\n  body.appendChild(list);\n}\n"]}